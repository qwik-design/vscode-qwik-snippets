{
  "useLocation": {
    "prefix": "qc-useLocation",
    "description": "Add `useLocation()` hook. useLocation() will retrieve the url details",
    "body": [
      "const ${1:location} = useLocation();"
    ]
  },
  "404": {
    "prefix": "qc-404-not-found",
    "description": "At times it is necessary to respond with HTTP status codes other than 200. In such cases, response handler is the place to determine what status code should be returned.",
    "body": [
      "import { component$ } from '@builder.io/qwik';",
      "",
      "type EndpointData = ProductData | null;",
      "",
      "interface ProductData {",
      "  skuId: string;",
      "  price: number;",
      "  description: string;",
      "}",
      "export const onGet: RequestHandler<EndpointData> = async ({ params, response }) => {",
      "  const product = await loadProductFromDatabase(params.skuId);",
      "",
      "  if (!product) {",
      "    // Product data not found",
      "    // but the data is still given to the renderer to decide what to do",
      "    response.status = 404;",
      "    return null;",
      "  } else {",
      "    // ...",
      "  }",
      "};",
      "",
      "export default component$(() => {",
      "  const resource = useEndpoint<typeof onGet>(); //equivalent to useEndpoint<EndpointData>",
      "",
      "  if (resource.state == 'resolved' && !resource.resolved) {",
      "    // Early return for 404",
      "    return <div>404: Product not found!!!</div>;",
      "  }",
      "",
      "  // Normal rendering",
      "  return (",
      "    <Resource",
      "      value={resource}",
      "      onPending={() => <div>Loading...</div>}",
      "      onError={() => <div>Error</div>}",
      "      onResolved={() => (",
      "        <>",
      "          <h1>Product: {product.productId}</h1>",
      "          <p>Price: {product.price}</p>",
      "          <p>{product.description}</p>",
      "        </>",
      "      )}",
      "    />",
      "  );",
      "});"
    ]
  },
  "Layout": {
    "prefix": "qc-layout",
    "description": "Add sample layout",
    "body": [
      "import { component$, Slot } from '@builder.io/qwik';",
      "import { Header } from '../components/header/header';",
      "import { Footer } from '../components/footer/footer';",
      "",
      "export default component$(() => {",
      "  return (",
      "    <>",
      "      <Header />",
      "      <main>",
      "        <Slot />",
      "      </main>",
      "      <Footer />",
      "    </>",
      "  );",
      "});"
    ]
  },
  "Layout Structure": {
    "prefix": "qc-layout-structure",
    "description": "Add sample layout structure",
    "body": [
      "┌───────────────────────────────────────────────────┐",
      "│ Header                                            │",
      "├─────────┬─────────────────────────────────────────┤",
      "│ Menu    │ <ROUTE_SPECIFIC_CONTENT>                │",
      "│ - home  │                                         │",
      "│ - about │                                         │",
      "│         │                                         │",
      "├─────────┴─────────────────────────────────────────┤",
      "│ Footer                                            │",
      "└───────────────────────────────────────────────────┘",
      "",
      "src/",
      "├── components/",
      "│   ├── header.tsx         # Header component implementation",
      "│   ├── footer.tsx         # Footer component implementation",
      "│   └── menu.tsx           # Menu component implementation",
      "└── routes/",
      "    ├── layout.tsx         # Layout implementation using: <Header>, <Footer>, and <Menu>",
      "    ├── about/",
      "    │   └── index.tsx      # https://example.com/about",
      "    └── index.tsx          # https://example.com"
    ]
  },
  "Menu": {
    "prefix": "qc-menu",
    "description": "Add sample menu",
    "body": [
      "import { component$ } from '@builder.io/qwik';",
      "",
      "export default component$(() => {",
      "  return (",
      "    <ul>",
      "      <li>Home</li>",
      "      <li>About</li>",
      "    </ul>",
      "  );",
      "});"
    ]
  },
  "Header": {
    "prefix": "qc-header",
    "description": "Add sampl header",
    "body": [
      "import { component$, useStyles$ } from '@builder.io/qwik';",
      "import styles from './header.css';",
      "",
      "export const Header = component$(() => {",
      "  useStyles$(styles);",
      "",
      "  return (",
      "    <header>",
      "      <div class=\"header-inner\">",
      "        <div class=\"header-logo\">",
      "          <a href=\"/\">",
      "            <span className=\"sr-only\">Qwik Homepage</span>",
      "            <img src=\"\" />",
      "          </a>",
      "        </div>",
      "        <ul >",
      "          <li>",
      "            <a href=\"/docs/\">",
      "              <span>Docs</span>",
      "            </a>",
      "          </li>",
      "          <li>",
      "            <a href=\"/tutorial/\">",
      "              <span>Tutorial</span>",
      "            </a>",
      "          </li>",
      "          <li>",
      "            <a href=\"/playground/\">",
      "              <span>Playground</span>",
      "            </a>",
      "          </li>",
      "        </ul>",
      "      </div>",
      "    </header>",
      "  );",
      "});",
      ""
    ]
  },
  "Footer": {
    "prefix": "qc-footer",
    "description": "Add sample footer",
    "body": [
      "import { component$, useStyles$ } from '@builder.io/qwik';",
      "import styles from './footer.css';",
      "",
      "export const Footer = component$(() => {",
      "  useStyles$(styles);",
      "",
      "  return (",
      "    <footer ",
      "      <div class=\"made-with-love\">Made with ❤️ by Qwik</div>",
      "      <div class=\"footer-top\">",
      "        <a href=\"https://www.builder.io\" target=\"_blank\">",
      "          <img src=\"\"/>",
      "        </a>",
      "        <ul class=\"footer-social\">",
      "          <li>",
      "            <a href=\"/sitemap\" target=\"_blank\" title=\"Sitemap\">",
      "              Sitemap",
      "            </a>",
      "          </li>",
      "          <li>",
      "            <a href=\"/socials\" target=\"_blank\" title=\"Social\">",
      "              Socials",
      "            </a>",
      "          </li>",
      "          <li>",
      "            <a href=\"/contact\" target=\"_blank\" title=\"Contact\">",
      "              Contact",
      "            </a>",
      "          </li>",
      "        </ul>",
      "      </div>",
      "      <div class=\"footer-bottom\">© 2022 Your Company, Inc.</div>",
      "    </footer>",
      "  );",
      "});"
    ]
  },
  "Nested layout": {
    "prefix": "qc-nested-layout",
    "description": "Add sample Nested layout. Most times it is desirable to nest layouts into each other. A page's content can be nested in numerous wrapping layouts, which is determined by the directory structure.",
    "body": [
      "// File: src/routes/layout.tsx",
      "export default component$(() => {",
      "  return (",
      "    <main>",
      "      <Slot /> {/* <== Child layout/route inserted here */}",
      "    </main>",
      "  );",
      "});",
      "",
      "// File: src/routes/about/layout.tsx",
      "export default component$(() => {",
      "  return (",
      "    <section>",
      "      <Slot /> {/* <== Child layout/route inserted here */}",
      "    </section>",
      "  );",
      "});",
      "",
      "// File: src/routes/about/index.tsx",
      "export default component$(() => {",
      "  return <h1>About</h1>;",
      "});"
    ]
  },
  "Nested Layout Structure": {
    "prefix": "qc-nested-layout-structure",
    "description": "Add Nested Layout Structure",
    "body": [
      "// ┌────────────────────────────────────────────────┐",
      "// │       src/routes/layout.tsx                    │",
      "// │  ┌──────────────────────────────────────────┐  │",
      "// │  │    src/routes/about/layout.tsx           │  │",
      "// │  │  ┌────────────────────────────────────┐  │  │",
      "// │  │  │ src/routes/about/index.tsx         │  │  │",
      "// │  │  │                                    │  │  │",
      "// │  │  └────────────────────────────────────┘  │  │",
      "// │  │                                          │  │",
      "// │  └──────────────────────────────────────────┘  │",
      "// │                                                │",
      "// └────────────────────────────────────────────────┘",
      "// src/",
      "// └── routes/",
      "//     ├── layout.tsx           # Parent layout",
      "//     └── about/",
      "//         ├── layout.tsx       # Child layout",
      "//         └── index.tsx        # https://example.com/about"
    ]
  },
  "Grouped Layout Structure": {
    "prefix": "qc-grouped-layout-structure",
    "description": "Common purpose routes are often placed into directories so they can share layouts, and so related source files are logically grouped next to each other. However, it may be desirable that the directory, which was used to group similar files and share layouts, is excluded from the public-facing URL. This is where \"grouped\" layouts come in (also referred to as a \"pathless\" layout route).",
    "body": [
      "// src/",
      "// └── routes/",
      "//     └── (account)/             # Notice the parentheses",
      "//         ├── layout.tsx         # Shared account layout",
      "//         └── profile/",
      "//             └── index.tsx      # https://example.com/profile",
      "//         └── settings/",
      "//             └── index.tsx      # https://example.com/settings"
    ]
  },
  "Named Layout Structure": {
    "prefix": "qc-named-layout-structure",
    "description": "At times related routes need to have drastically different layouts from their siblings. It is possible to define multiple layouts for different sibling routes. A single default layout and any number of named layouts. The child route can then request a specific named-layout. Qwik City defines the convention that layouts are within src/routes and the filename starts with layout. That's why the default layout is named layout.tsx. A named layout also starts with layout followed by a dash - and a unique name, such as layout-narrow.tsx.",
    "body": [
      "// src/",
      "// └── routes/",
      "//     ├── contact/",
      "//     │   └── index@narrow.tsx      # https://example.com/contact (Layout: layout-narrow.tsx)",
      "//     ├── layout.tsx                # Default layout",
      "//     ├── layout-narrow.tsx         # Default named layout",
      "//     └── index.tsx                 # https://example.com/ (Layout: layout.tsx)",
      "// https://example.com/",
      "// ┌──────────────────────────────────────────────────┐",
      "// │       src/routes/layout.tsx                      │",
      "// │  ┌────────────────────────────────────────────┐  │",
      "// │  │    src/routes/index.tsx                    │  │",
      "// │  │                                            │  │",
      "// │  └────────────────────────────────────────────┘  │",
      "// │                                                  │",
      "// └──────────────────────────────────────────────────┘",
      "// https://example.com/contact",
      "// ┌──────────────────────────────────────────────────┐",
      "// │       src/routes/layout-narrow.tsx               │",
      "// │  ┌────────────────────────────────────────────┐  │",
      "// │  │    src/routes/contact/index@narrow.tsx     │  │",
      "// │  │                                            │  │",
      "// │  └────────────────────────────────────────────┘  │",
      "// │                                                  │",
      "// └──────────────────────────────────────────────────┘"
    ]
  },
  "Top Layout Structure": {
    "prefix": "qc-top-layout-structure",
    "description": "The default is that a page will create its layout stack by climbing up each directory until it gets to the src/routes directory. If at any point it should not continue climbing up the directories you can use the \"top\" layout feature. A top layout means that the layout is always at the very top of the nested layout stack, and doesn't keep collecting parent layouts, even when there are parent directory layouts. A top layout is specified by ending the layout filename with !, such as layout!.tsx.",
    "body": [
      "// src/",
      "// └── routes/",
      "//     ├── layout.tsx              # Root layout",
      "//     └── docs/",
      "//         ├── layout!.tsx         # Docs layout",
      "//         ├── index.tsx           # https://example.com/docs",
      "//         └── api/",
      "//             └── index.tsx       # https://example.com/docs/api"
    ]
  },
  "onGet": {
    "prefix": "qc-onGet",
    "description": "onGet API route",
    "body": [
      "export const onGet: RequestHandler = (request) => { $1 };"
    ]
  },
  "onGet Sample": {
    "prefix": "qc-onGet-sample",
    "description": "onGet Sample",
    "body": [
      "// File: src/routes/product/[skuId]/details/index.tsx",
      "import type { RequestHandler } from '@builder.io/qwik-city';",
      "",
      "interface ${1:ProductData} {",
      "  skuId: string;",
      "  price: number;",
      "  description: string;",
      "}",
      "",
      "export const on${2:Get}: RequestHandler<${1}> = async ({ params }) => {",
      "  // put your DB access here, we are hard coding a response for simplicity.",
      "  return {",
      "    skuId: params.skuId,",
      "    price: 123.45,",
      "    description: `Description for ${params.skuId}`,",
      "  };",
      "};"
    ]
  },
  "onGet in A Component": {
    "prefix": "qc-onGet-in-component",
    "description": "onGet in A Component",
    "body": [
      "import { Resource, component$, useStore } from '@builder.io/qwik';",
      "import type { RequestHandler } from '@builder.io/qwik-city';",
      "import { useEndpoint } from \"@builder.io/qwik-city\";",
      "",
      "",
      "interface ${1:ProductData} { ... }",
      "export const on${2:Get}: RequestHandler<$1> = async ({ params }) => { ... };",
      "",
      "export default component$(() => {",
      "  const productData = useEndpoint<ProductData>();",
      "  return (",
      "    <Resource",
      "      value={productData}",
      "      onPending={() => <div>Loading...</div>}",
      "      onRejected={() => <div>Error</div>}",
      "      onResolved={(product) => (",
      "        <>",
      "          <h1>Product: {product.skuId}</h1>",
      "          <p>Price: {product.price}</p>",
      "          <p>{product.description}</p>",
      "        </>",
      "      )}",
      "    />",
      "  );",
      "});"
    ]
  },
  "onPost": {
    "prefix": "qc-onPost",
    "description": "onPost API route",
    "body": [
      "export const onPost: RequestHandler = (request) => { $1 };"
    ]
  },
  "onPut": {
    "prefix": "qc-onPut",
    "description": "onPut API route",
    "body": [
      "export const onPut: RequestHandler = (request) => { $1 };"
    ]
  },
  "onPut Sample": {
    "prefix": "qc-onPut-sample",
    "description": "onPut Sample",
    "body": [
      "// File: src/routes/product/[skuId]/index.tsx",
      "import type { RequestHandler } from '@builder.io/qwik-city';",
      "",
      "type ${0:EndpointData} = $1 | null;",
      "",
      "interface ${1:ProductData} {",
      "  skuId: string;",
      "  price: number;",
      "  description: string;",
      "}",
      "export const on${2:Put}: RequestHandler<$0> = async ({ url, params, request, response }) => {",
      "  // put your DB access here (hard coding a response for the simplicity)",
      "",
      "  // read data from request and perform DB update.",
      "  // console.log(params.skuId);",
      "  // console.log(request.method);",
      "  // console.log(url.pathname);",
      "",
      "  // set response headers",
      "  response.headers.append('Cache-Control', ' public, max-age=86400');",
      "",
      "  // return data to be access from `useEndpoint()`",
      "  return {",
      "    skuId: params.skuId,",
      "    price: 123.45,",
      "    description: `Description for ${params.skuId}`,",
      "  };",
      "};",
      ""
    ]
  },
  "onPatch": {
    "prefix": "qc-onPatch",
    "description": "onPatch API route",
    "body": [
      "export const onPatch: RequestHandler = (request) => { $1 };"
    ]
  },
  "onDelete": {
    "prefix": "qc-onDelete",
    "description": "onDelete API route",
    "body": [
      "export const onDelete: RequestHandler = (request) => { $1 };"
    ]
  },
  "onGet (typed)": {
    "prefix": "qc-onGet-typed",
    "description": "onGet API route",
    "body": [
      "export interface ${1:PageData} {",
      "  $2",
      "};",
      "",
      "export const onGet: RequestHandler<$1> = (request) => {",
      "  $3",
      "};"
    ]
  },
  "Redirect Sample": {
    "prefix": "qc-redirect-sample",
    "body": [
      "// File: src/routes/dashboard.js",
      "import { component$ } from '@builder.io/qwik';",
      "import { checkAuthorization } from '../auth'; // Your authorization code",
      "import type { DashboardData } from '../types'; // Your types",
      "",
      "export const onGet: RequestHandler<DashboardData> = async ({ request, response }) => {",
      "  const isAuthorized = checkAuthorization(request.headers.get('cookie'));",
      "",
      "  if (!isAuthorized) {",
      "    // User is not authorized!",
      "    // throw the redirect response to",
      "    // relocate the user to the log-in page",
      "    throw response.redirect('/login');",
      "  } else {",
      "    // ...",
      "  }",
      "};"
    ],
    "description": "Redirect Sample: Sometimes you want to redirect a user from the current page to another page. Let's say a user tries to go to a dashboard page but has not logged in yet. We want them to be redirected to a login page so they can be authenticated."
  },
  "Redirect": {
    "prefix": "qc-redirect",
    "description": "useEndpoint declaration",
    "body": "response.redirect('${1:/login}', ${2:301});"
  },
  "useEndpoint": {
    "prefix": "qc-useEndpoint",
    "description": "useEndpoint declaration",
    "body": "const $1 = useEndpoint<typeof onGet>();"
  }
}
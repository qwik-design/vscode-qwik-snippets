{
	"Qwik Component": {
		"prefix": "q-component",
		"description": "Components are the building blocks of a Qwik application. Components are declared using component$() and at a minimum need to return a JSX Element.",
		"body": [
			"import { component$ } from '@builder.io/qwik';",
			"",
			"export const ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}:component} = component$(() => {",
			"  return <${2:div}>${3:Hello Qwik!}</$2>",
			"});"
		]
	},
	"Qwik Bind": {
		"prefix": "q-bind",
		"description": "Add binding expression to element",
		"body": [
			"{1:data.property}"
		]
	},
	"Qwik Component with binding": {
		"prefix": "q-component-with-binding",
		"description": "Components are the building blocks of a Qwik application. Components are declared using component$() and at a minimum need to return a JSX Element. The purpose of components is to merge data with the JSX template. You use the {expression} to inject data into a template. Expressions are placed either as a text node or attribute on an element.",
		"body": [
			"import { component$ } from '@builder.io/qwik';",
			"",
			"",
			"export const ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}:component} = component$(() => {",
			"  const ${2:name} = '${3:Qwik}';",
			"  return <${4:div}>Hello {${2}}!</$4>",
			"});"
		]
	},
	"Qwik Composing Components": {
		"prefix": "q-component-compose",
		"description": "Components are the building blocks of a Qwik application. Components are declared using component$() and at a minimum need to return a JSX Element. Components are composed together to build applications.",
		"body": [
			"import { component$ } from '@builder.io/qwik';",
			"",
			"export const ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}:component} = component$(() => {",
			"  return (",
			"    <${2:div}>",
			"      <$3 />",
			"    </${2}>",
			"  );",
			"});",
			"",
			"export const ${3:Child} = component$(() => {",
			"  return <${4:div}>${5:Hello Qwik Child Component!}</$4>",
			"};"
		]
	},
	"Qwik Inline Component": {
		"prefix": "q-inline-component",
		"description": "Components are the building blocks of a Qwik application. Components are declared using component$() and at a minimum need to return a JSX Element. If you want to ensure a component loads with another component, you create an inline component. Inline components load as a part of the parent component and are equivalent to how most other frameworks deal with components. ",
		"body": [
			"export const ${1:Inline} = () => {",
			"  return <${2:div}>${3:Hello Qwik Inline Component!}</$2>",
			"};"
		]
	},
	"Qwik Component with Inline Component": {
		"prefix": "q-component-with-inline-component",
		"description": "Components are the building blocks of a Qwik application. Components are declared using component$() and at a minimum need to return a JSX Element. If you want to ensure a component loads with another component, you create an inline component. Inline components load as a part of the parent component and are equivalent to how most other frameworks deal with components. ",
		"body": [
			"import { component$ } from '@builder.io/qwik';",
			"",
			"export const ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}:component} = component$(() => {",
			"  return (",
			"    <${2:div}>",
			"      <$3 />",
			"    </${2}>",
			"  );",
			"});",
			"",
			"export const ${3:Inline} = () => {",
			"  return <${4:div}>${5:Hello Qwik Inline Component!}</$4>",
			"};"
		]
	},
	"Qwik Component with props": {
		"prefix": "q-component-with-props",
		"description": "Components are the building blocks of a Qwik application. Components are declared using component$() and at a minimum need to return a JSX Element. ",
		"body": [
			"import { component$, useSignal } from '@builder.io/qwik';",
			"",
			"export interface ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}Props {",
			"  $2",
			"}",
			"",
			"export const $1 = component$<$1Props>((props) => {",
			"  const ${2:count} = useSignal(0);",
			"  return (",
			"    <${3:div} on${4:Click}$={(event) => {$5}}>",
			"      $6",
			"    </${3}>",
			"  );",
			"});"
		]
	},
	"Qwik component with store and props": {
		"prefix": "q-component-with-store-and-props",
		"description": "Qwik component with props",
		"body": [
			"import { component$, useSignal } from '@builder.io/qwik';",
			"",
			"export interface ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}Props {",
			"  $2",
			"}",
			"",
			"export const $1 = component$<$1Props>((props) => {",
			"  const ${2:count} = useSignal(0);",
			"  return (",
			"    <${3:div} on${4:Click}$={(event) => {$5}}>",
			"      $6",
			"    </${3}>",
			"  );",
			"});"
		]
	},
	"Qwik onClick Event": {
		"prefix": "q-on-click-event",
		"description": "Qwik can listen on a variety of events by placing an on<Eventname>$ attribute on an element that subscribes to the corresponding browser event. ",
		"body": [
			"on${1:Click}$={(${2:event}) => ${3:alert}('${4:Hello Qwik Event!}')}"
		]
	},
	"Qwik Prevent Default Click Event": {
		"prefix": "q-prevent-default-click-event",
		"description": "For some events browsers have default behavior. For example, when you click a link, the browser will usually navigate to the link's href. There are times when we would like to prevent that. For this reason Event API contains preventDefault() method. Browser events are synchronous, but because Qwik is fine-grained loadable Qwik execution model is asynchronous. This means that at the time when the event is triggered, the event handler is not yet loaded. By the time the event is loaded the event has already been processed by the browser and calling preventDefault() will have no effect. To solve this Qwik provides a declarative API to automatically call preventDefault() when the event is triggered. This is achieved by adding preventdefault:<event-name> attribute to the element. This allows the Qwikloader to synchronously call preventDefault() when the event is triggered.",
		"body": [
			"preventdefault:${1:click}"
		]
	},
	"useOn": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q-useOn",
		"description": "Register a listener on the current component's host element",
		"body": [
			"useOn(",
			"  \"$1\",",
			"  $((event) => {$0})",
			");"
		]
	},
	"useOnDocument": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q-useOnDocument",
		"description": "Register a listener on document",
		"body": [
			"useOnDocument(",
			"  \"$1\",",
			"  $((event) => {$0})",
			");"
		]
	},
	"useOnWindow": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q-useOnWindow",
		"description": "Register a listener on window",
		"body": [
			"useOnWindow(",
			"  \"$1\",",
			"  $((event) => {$0})",
			");"
		]
	},
	"Qwik signal": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q-useSignal",
		"description": "useSignal() declaration",
		"body": [
			"const ${1:foo} = useSignal($2);",
			"$0"
		]
	},
	"Qwik store": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q-useStore",
		"description": "useStore() declaration",
		"body": [
			"const ${1:state} = useStore({",
			"  $2",
			"});",
			"$0"
		]
	},
	"$ hook": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q-$",
		"description": "$() function hook",
		"body": [
			"$(() => {",
			"  $0",
			"});",
			""
		]
	},
	"useClientEffect": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q-useClientEffect",
		"description": "useClientEffect$() function hook",
		"body": [
			"useClientEffect$(({ track }) => {",
			"  $0",
			"});",
			""
		]
	},
	"useWatch": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q-useWatch",
		"description": "useWatch$() function hook",
		"body": [
			"useWatch$(({ track }) => {",
			"  track(() => $1);",
			"  $0",
			"});",
			""
		]
	},
	"useResource": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q-useResource",
		"description": "useResource$() declaration",
		"body": [
			"const $1 = useResource$(({ track, cleanup }) => {",
			"  $0",
			"});",
			""
		]
	},
	"useServerMount": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q-useServerMount",
		"description": "useServerMount$() function hook",
		"body": [
			"useServerMount$(() => {",
			"  $0",
			"});",
			""
		]
	}
}
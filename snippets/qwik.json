{
	"Qwik Component": {
		"prefix": "q-component",
		"description": "Components are the building blocks of a Qwik application. Components are declared using component$() and at a minimum need to return a JSX Element.",
		"body": [
      "import { component$ } from '@builder.io/qwik';",
      "",
			"export const ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}} = component$(() => {",
			"  return <${2:div}>${3:Hello Qwik!}</$2>",
			"});"
		]
	},
	"Qwik Component with binding": {
		"prefix": "q-component-binding",
		"description": "Components are the building blocks of a Qwik application. Components are declared using component$() and at a minimum need to return a JSX Element. The purpose of components is to merge data with the JSX template. You use the {expression} to inject data into a template. Expressions are placed either as a text node or attribute on an element.",
		"body": [
      "import { component$ } from '@builder.io/qwik';",
      "",
      "",
			"export const ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}} = component$(() => {",
      "  const ${2:name} = '${3:Qwik};",
			"  return <${4:div}>Hello {${2}!</$4>",
			"});"
		]
	},
  "Qwik Composing Components": {
		"prefix": "q-component-compose",
		"description": "Components are the building blocks of a Qwik application. Components are declared using component$() and at a minimum need to return a JSX Element. Components are composed together to build applications.",
		"body": [
      "import { component$ } from '@builder.io/qwik';",
      "",
			"export const ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}} = component$(() => {",
			"  return (",
			"    <${2:div}div>",
			"      <$3 />",
			"    </${2}>",
			"  );",
			"});",
      "",
			"export const ${3:Child} = component$(() => {",
			"  return <${2:div}>${3:Hello Qwik Child Component!}</$2>",
			"};"
		]
	},
  "Qwik Component with Inline Component": {
		"prefix": "q-component-inline",
		"description": "Components are the building blocks of a Qwik application. Components are declared using component$() and at a minimum need to return a JSX Element. If you want to ensure a component loads with another component, you create an inline component. Inline components load as a part of the parent component and are equivalent to how most other frameworks deal with components. ",
		"body": [
      "import { component$ } from '@builder.io/qwik';",
      "",
			"export const ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}} = component$(() => {",
			"  return (",
			"    <${2:div}div>",
			"      <$3 />",
			"    </${2}>",
			"  );",
			"});",
      "",
			"export const ${3:Inline} = () => {",
			"  return <${4:div}>${5:Hello Qwik Inline Component!}</$4>",
			"};"
		]
	},
	"Qwik Component with props": {
		"prefix": "q-component with props",
		"description": "Components are the building blocks of a Qwik application. Components are declared using component$() and at a minimum need to return a JSX Element. ",
		"body": [
      "import { component$, useSignal } from '@builder.io/qwik';",
      "",
			"export interface ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}Props {",
			"  $2",
			"}",
			"",
			"export const $1 = component$<$1Props>((props) => {",
			"  const ${2:count} = useSignal(0);",
			"  return (",
			"    <${3:div} on${4:Click}$={(event) => {$5}}>",
			"      $6",
			"    </${3}>",
			"  );",
			"});"
		]
	},
	"Qwik component with store and props": {
		"prefix": "q-component with store and props",
		"description": "Qwik component with props",
		"body": [
      "import { component$, useSignal } from '@builder.io/qwik';",
      "",
			"export interface ${1:${TM_FILENAME_BASE/(.*)/${1:/capitalize}/}}Props {",
			"  $2",
			"}",
			"",
			"export const $1 = component$<$1Props>((props) => {",
			"  const ${2:count} = useSignal(0);",
			"  return (",
			"    <${3:div} on${4:Click}$={(event) => {$5}}>",
			"      $6",
			"    </${3}>",
			"  );",
			"});"
		]
	},
	"Qwik signal": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:useSignal",
		"description": "useSignal() declaration",
		"body": [
			"const ${1:foo} = useSignal($2);",
			"$0"
		]
	},
	"Qwik store": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:useStore",
		"description": "useStore() declaration",
		"body": [
			"const ${1:state} = useStore({",
			"  $2",
			"});",
			"$0"
		]
	},
	"$ hook": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:$",
		"description": "$() function hook",
		"body": [
			"$(() => {",
			"  $0",
			"});",
			""
		]
	},
	"useClientEffect": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:useClientEffect",
		"description": "useClientEffect$() function hook",
		"body": [
			"useClientEffect$(({ track }) => {",
			"  $0",
			"});",
			""
		]
	},
	"useWatch": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:useWatch",
		"description": "useWatch$() function hook",
		"body": [
			"useWatch$(({ track }) => {",
			"  track(() => $1);",
			"  $0",
			"});",
			""
		]
	},
	"useResource": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:useResource",
		"description": "useResource$() declaration",
		"body": [
			"const $1 = useResource$(({ track, cleanup }) => {",
			"  $0",
			"});",
			""
		]
	},
	"useServerMount": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:useServerMount",
		"description": "useServerMount$() function hook",
		"body": [
			"useServerMount$(() => {",
			"  $0",
			"});",
			""
		]
	}
}